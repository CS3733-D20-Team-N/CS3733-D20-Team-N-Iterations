plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "io.freefair.lombok" version "5.0.0-rc6"
}

mainClassName = 'edu.wpi.N.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}

dependencies {
    implementation(
            'com.fazecast:jSerialComm:[2.0.0,3.0.0)',
            'com.jfoenix:jfoenix:9.0.9',

            // You may comment out the database dependency you do not use
            //'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.14.2.0',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
            'com.opencsv:opencsv:5.1',

            'com.github.sarxos:webcam-capture:0.3.12',
            'com.google.zxing:core:3.4.0',
            'com.google.zxing:javase:3.4.0',
            'com.google.cloud:google-cloud-dialogflow:1.0.0',
            'com.google.cloud:google-cloud-storage:1.107.0',
            'com.google.cloud:google-cloud-translate:1.94.5',
            'com.google.cloud:google-cloud-texttospeech:1.0.2',
            'com.google.cloud:google-cloud-speech:1.22.6',
            'com.google.inject:guice:4.2.3',
            'com.squareup.okhttp3:okhttp:4.6.0',
            [group: 'edu.wpi.cs3733.d20.teamC', name: 'InterpreterRequest', version:'1.0.1'],
            [group: 'edu.wpi.cs3733.d20.teamE', name: 'onCallBedsAPI', version:'1.0.1'],
            [group: 'edu.wpi.cs3733.d20.teamP', name: 'FoodRequest', version:'1.1.0'],
            [group: 'edu.wpi.cs3733.d20.teamA', name: 'TeamAFlowerRequest', version:'1.1.2'],
            [group: 'edu.wpi.cs3733.d20.teamB', name: 'IncidentReporting', version:'1.0.0'],
            [group: 'edu.wpi.cs3733.d20.teamL', name: 'GiftDeliveryServiceRequest', version:'1.0.0'],
            [group: 'edu.wpi.cs3733.d20.teamN', name: 'sanitation', version:'1.8.4']
    )

    compile group: 'com.google.guava', name: 'guava', version: '23.5-jre', 'org.mybatis:mybatis:3.5.4', 'org.apache.httpcomponents:httpclient:4.5.12'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    compile files('src/main/resources/edu/wpi/N/jnativehook-2.1.0.jar')
    compile 'org.controlsfx:controlsfx:9.0.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'com.calendarfx', name: 'view', version: '8.4.2'


    implementation group: 'at.favre.lib', name: 'bcrypt', version: '0.9.0'

    testImplementation(
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
    testCompile (
            "org.mockito:mockito-core:2.+")
    testRuntimeOnly(
            'org.testfx:openjfx-monocle:jdk-11+26',
    )
    implementation 'junit:junit:4.12'
}

javafx {
    version = "11"
     modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.web']
}

run {
    jvmArgs = ['--add-opens=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED',
    ]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

def codeCoverageExcludes = [
        'edu.wpi.N.App',
        'edu.wpi.N.Main',
        'edu.wpi.N.entities.*',
        'edu.wpi.N.views.*',
        'edu.wpi.N.qrcontrol.*',
        'edu.wpi.N.controllerData.*',
        'edu.wpi.N.database.setupDB',
        'edu.wpi.N.chatbot.*',
        'edu.wpi.N.algorithms.AbsAlgo.FloorSortNodes',
        'edu.wpi.N.algorithms.Directions',
        'edu.wpi.N.algorithms.Direction',
        'edu.wpi.N.algorithms.Directions.State',
        'org.jnativehook.*',
        'edu.wpi.N.App.*'
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

// uncomment to enable spotless checking
spotless {
    java {
        googleJavaFormat()
    }
}
